{"ast":null,"code":"var _jsxFileName = \"/Users/bhartiprakash/Documents/GitHub/TaskManagementTool/taskmanagementtool-ui/src/components/Register.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport { Button, Form } from \"react-bootstrap\";\nimport { Link } from \"react-router-dom\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst USER_REGEX = /^[A-z][A-z0-9-_]{3,23}$/;\nconst PWD_REGEX = /^(?=.*[a-z])(?=.*[A-Z])(?=.*[0-9])(?=.*[!@#$%]).{8,24}$/;\nconst Register = _ref => {\n  _s();\n  let {\n    onSubmit\n  } = _ref;\n  const [firstName, setFirstName] = useState(\"\");\n  const [lastName, setLastName] = useState(\"\");\n  const [userName, setUserName] = useState(\"\");\n  const [email, setEmail] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n  const handleSubmit = e => {\n    e.preventDefault();\n    onSubmit(firstName, lastName, userName, email, password);\n  };\n  return /*#__PURE__*/_jsxDEV(Form, {\n    onSubmit: handleSubmit,\n    children: [/*#__PURE__*/_jsxDEV(Form.Group, {\n      controlId: \"formBasicEmail\",\n      children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n        children: \"First Name:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n        type: \"email\",\n        placeholder: \"FirstName\",\n        value: email,\n        onChange: e => setFirstName(e.target.value),\n        required: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Form.Group, {\n      controlId: \"formBasicEmail\",\n      children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n        children: \"Last Name:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n        type: \"email\",\n        placeholder: \"LastName\",\n        value: email,\n        onChange: e => setLastName(e.target.value),\n        required: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Form.Group, {\n      controlId: \"formBasicEmail\",\n      children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n        children: \"User Name:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n        type: \"email\",\n        placeholder: \"UserName\",\n        value: email,\n        onChange: e => setUserName(e.target.value),\n        required: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Form.Group, {\n      controlId: \"formBasicEmail\",\n      children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n        children: \"Email:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n        type: \"email\",\n        placeholder: \"Enter email\",\n        value: email,\n        onChange: e => setEmail(e.target.value),\n        required: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Form.Group, {\n      controlId: \"formBasicPassword\",\n      children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n        children: \"Password:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n        type: \"password\",\n        placeholder: \"Password\",\n        value: password,\n        onChange: e => setPassword(e.target.value),\n        required: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Form.Label, {\n        children: \"Confirm Password:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n        type: \"password\",\n        placeholder: \"ConfirmPassword\",\n        value: password,\n        onChange: e => setPassword(e.target.value),\n        required: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      variant: \"primary\",\n      type: \"submit\",\n      children: \"Register\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Link, {\n      to: \"/\",\n      children: /*#__PURE__*/_jsxDEV(Button, {\n        children: \" Cancel \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 37,\n    columnNumber: 5\n  }, this);\n};\n_s(Register, \"UyGLy8i1/Jdns/RiCqKvCgzglpc=\");\n_c = Register;\nexport default Register;\n\n// /******************************New Code**************************************/\n// import { useRef, useState, useEffect } from \"react\";\n// import {\n//   faCheck,\n//   faTimes,\n//   faInfoCircle,\n// } from \"@fortawesome/free-solid-svg-icons\";\n// import { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\n// import axios from \"axios\";\n\n// const USER_REGEX = /^[A-z][A-z0-9-_]{3,23}$/;\n// const PWD_REGEX = /^(?=.*[a-z])(?=.*[A-Z])(?=.*[0-9])(?=.*[!@#$%]).{8,24}$/;\n// const REGISTER_URL = \"/register\";\n\n// const Register = () => {\n//   const userRef = useRef();\n//   const errRef = useRef();\n\n//   const [user, setUser] = useState(\"\");\n//   const [validName, setValidName] = useState(false);\n//   const [userFocus, setUserFocus] = useState(false);\n\n//   const [pwd, setPwd] = useState(\"\");\n//   const [validPwd, setValidPwd] = useState(false);\n//   const [pwdFocus, setPwdFocus] = useState(false);\n\n//   const [matchPwd, setMatchPwd] = useState(\"\");\n//   const [validMatch, setValidMatch] = useState(false);\n//   const [matchFocus, setMatchFocus] = useState(false);\n\n//   const [errMsg, setErrMsg] = useState(\"\");\n//   const [success, setSuccess] = useState(false);\n\n//   useEffect(() => {\n//     userRef.current.focus();\n//   }, []);\n\n//   useEffect(() => {\n//     setValidName(USER_REGEX.test(user));\n//   }, [user]);\n\n//   useEffect(() => {\n//     setValidPwd(PWD_REGEX.test(pwd));\n//     setValidMatch(pwd === matchPwd);\n//   }, [pwd, matchPwd]);\n\n//   useEffect(() => {\n//     setErrMsg(\"\");\n//   }, [user, pwd, matchPwd]);\n\n//   const handleSubmit = async (e) => {\n//     e.preventDefault();\n//     // if button enabled with JS hack\n//     const v1 = USER_REGEX.test(user);\n//     const v2 = PWD_REGEX.test(pwd);\n//     if (!v1 || !v2) {\n//       setErrMsg(\"Invalid Entry\");\n//       return;\n//     }\n//     try {\n//       const response = await axios.post(\n//         REGISTER_URL,\n//         JSON.stringify({ user, pwd }),\n//         {\n//           headers: { \"Content-Type\": \"application/json\" },\n//           withCredentials: true,\n//         }\n//       );\n//       console.log(response?.data);\n//       console.log(response?.accessToken);\n//       console.log(JSON.stringify(response));\n//       setSuccess(true);\n//       //clear state and controlled inputs\n//       //need value attrib on inputs for this\n//       setUser(\"\");\n//       setPwd(\"\");\n//       setMatchPwd(\"\");\n//     } catch (err) {\n//       if (!err?.response) {\n//         setErrMsg(\"No Server Response\");\n//       } else if (err.response?.status === 409) {\n//         setErrMsg(\"Username Taken\");\n//       } else {\n//         setErrMsg(\"Registration Failed\");\n//       }\n//       errRef.current.focus();\n//     }\n//   };\n\n//   return (\n//     <>\n//       {success ? (\n//         <section>\n//           <h1>Success!</h1>\n//           <p>\n//             <a href=\"#\">Sign In</a>\n//           </p>\n//         </section>\n//       ) : (\n//         <section>\n//           <p\n//             ref={errRef}\n//             className={errMsg ? \"errmsg\" : \"offscreen\"}\n//             aria-live=\"assertive\"\n//           >\n//             {errMsg}\n//           </p>\n//           <h1>Register</h1>\n//           <form onSubmit={handleSubmit}>\n//             <label htmlFor=\"username\">\n//               Username:\n//               <FontAwesomeIcon\n//                 icon={faCheck}\n//                 className={validName ? \"valid\" : \"hide\"}\n//               />\n//               <FontAwesomeIcon\n//                 icon={faTimes}\n//                 className={validName || !user ? \"hide\" : \"invalid\"}\n//               />\n//             </label>\n//             <input\n//               type=\"text\"\n//               id=\"username\"\n//               ref={userRef}\n//               autoComplete=\"off\"\n//               onChange={(e) => setUser(e.target.value)}\n//               value={user}\n//               required\n//               aria-invalid={validName ? \"false\" : \"true\"}\n//               aria-describedby=\"uidnote\"\n//               onFocus={() => setUserFocus(true)}\n//               onBlur={() => setUserFocus(false)}\n//             />\n//             <p\n//               id=\"uidnote\"\n//               className={\n//                 userFocus && user && !validName ? \"instructions\" : \"offscreen\"\n//               }\n//             >\n//               <FontAwesomeIcon icon={faInfoCircle} />\n//               4 to 24 characters.\n//               <br />\n//               Must begin with a letter.\n//               <br />\n//               Letters, numbers, underscores, hyphens allowed.\n//             </p>\n\n//             <label htmlFor=\"password\">\n//               Password:\n//               <FontAwesomeIcon\n//                 icon={faCheck}\n//                 className={validPwd ? \"valid\" : \"hide\"}\n//               />\n//               <FontAwesomeIcon\n//                 icon={faTimes}\n//                 className={validPwd || !pwd ? \"hide\" : \"invalid\"}\n//               />\n//             </label>\n//             <input\n//               type=\"password\"\n//               id=\"password\"\n//               onChange={(e) => setPwd(e.target.value)}\n//               value={pwd}\n//               required\n//               aria-invalid={validPwd ? \"false\" : \"true\"}\n//               aria-describedby=\"pwdnote\"\n//               onFocus={() => setPwdFocus(true)}\n//               onBlur={() => setPwdFocus(false)}\n//             />\n//             <p\n//               id=\"pwdnote\"\n//               className={pwdFocus && !validPwd ? \"instructions\" : \"offscreen\"}\n//             >\n//               <FontAwesomeIcon icon={faInfoCircle} />\n//               8 to 24 characters.\n//               <br />\n//               Must include uppercase and lowercase letters, a number and a\n//               special character.\n//               <br />\n//               Allowed special characters:{\" \"}\n//               <span aria-label=\"exclamation mark\">!</span>{\" \"}\n//               <span aria-label=\"at symbol\">@</span>{\" \"}\n//               <span aria-label=\"hashtag\">#</span>{\" \"}\n//               <span aria-label=\"dollar sign\">$</span>{\" \"}\n//               <span aria-label=\"percent\">%</span>\n//             </p>\n\n//             <label htmlFor=\"confirm_pwd\">\n//               Confirm Password:\n//               <FontAwesomeIcon\n//                 icon={faCheck}\n//                 className={validMatch && matchPwd ? \"valid\" : \"hide\"}\n//               />\n//               <FontAwesomeIcon\n//                 icon={faTimes}\n//                 className={validMatch || !matchPwd ? \"hide\" : \"invalid\"}\n//               />\n//             </label>\n//             <input\n//               type=\"password\"\n//               id=\"confirm_pwd\"\n//               onChange={(e) => setMatchPwd(e.target.value)}\n//               value={matchPwd}\n//               required\n//               aria-invalid={validMatch ? \"false\" : \"true\"}\n//               aria-describedby=\"confirmnote\"\n//               onFocus={() => setMatchFocus(true)}\n//               onBlur={() => setMatchFocus(false)}\n//             />\n//             <p\n//               id=\"confirmnote\"\n//               className={\n//                 matchFocus && !validMatch ? \"instructions\" : \"offscreen\"\n//               }\n//             >\n//               <FontAwesomeIcon icon={faInfoCircle} />\n//               Must match the first password input field.\n//             </p>\n\n//             <button\n//               disabled={!validName || !validPwd || !validMatch ? true : false}\n//             >\n//               Sign Up\n//             </button>\n//           </form>\n//           <p>\n//             Already registered?\n//             <br />\n//             <span className=\"line\">\n//               {/*put router link here*/}\n//               <a href=\"#\">Sign In</a>\n//             </span>\n//           </p>\n//         </section>\n//       )}\n//     </>\n//   );\n// };\n\n// export default Register;\nvar _c;\n$RefreshReg$(_c, \"Register\");","map":{"version":3,"names":["React","useState","Button","Form","Link","jsxDEV","_jsxDEV","USER_REGEX","PWD_REGEX","Register","_ref","_s","onSubmit","firstName","setFirstName","lastName","setLastName","userName","setUserName","email","setEmail","password","setPassword","handleSubmit","e","preventDefault","children","Group","controlId","Label","fileName","_jsxFileName","lineNumber","columnNumber","Control","type","placeholder","value","onChange","target","required","variant","to","_c","$RefreshReg$"],"sources":["/Users/bhartiprakash/Documents/GitHub/TaskManagementTool/taskmanagementtool-ui/src/components/Register.tsx"],"sourcesContent":["import React, { useState } from \"react\";\r\nimport {\r\n  faCheck,\r\n  faTimes,\r\n  faInfoCircle,\r\n} from \"@fortawesome/free-solid-svg-icons\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { Button, Form, Alert } from \"react-bootstrap\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nconst USER_REGEX = /^[A-z][A-z0-9-_]{3,23}$/;\r\nconst PWD_REGEX = /^(?=.*[a-z])(?=.*[A-Z])(?=.*[0-9])(?=.*[!@#$%]).{8,24}$/;\r\n\r\ninterface RegisterProps {\r\n  onSubmit: (\r\n    firstName: string,\r\n    lastName: string,\r\n    userName: string,\r\n    email: string,\r\n    password: string\r\n  ) => void;\r\n}\r\n\r\nconst Register: React.FC<RegisterProps> = ({ onSubmit }) => {\r\n  const [firstName, setFirstName] = useState(\"\");\r\n  const [lastName, setLastName] = useState(\"\");\r\n  const [userName, setUserName] = useState(\"\");\r\n  const [email, setEmail] = useState(\"\");\r\n  const [password, setPassword] = useState(\"\");\r\n\r\n  const handleSubmit = (e: React.FormEvent<HTMLFormElement>) => {\r\n    e.preventDefault();\r\n    onSubmit(firstName, lastName, userName, email, password);\r\n  };\r\n\r\n  return (\r\n    <Form onSubmit={handleSubmit}>\r\n      <Form.Group controlId=\"formBasicEmail\">\r\n        <Form.Label>First Name:</Form.Label>\r\n        <Form.Control\r\n          type=\"email\"\r\n          placeholder=\"FirstName\"\r\n          value={email}\r\n          onChange={(e) => setFirstName(e.target.value)}\r\n          required\r\n        />\r\n      </Form.Group>\r\n\r\n      <Form.Group controlId=\"formBasicEmail\">\r\n        <Form.Label>Last Name:</Form.Label>\r\n        <Form.Control\r\n          type=\"email\"\r\n          placeholder=\"LastName\"\r\n          value={email}\r\n          onChange={(e) => setLastName(e.target.value)}\r\n          required\r\n        />\r\n      </Form.Group>\r\n\r\n      <Form.Group controlId=\"formBasicEmail\">\r\n        <Form.Label>User Name:</Form.Label>\r\n        <Form.Control\r\n          type=\"email\"\r\n          placeholder=\"UserName\"\r\n          value={email}\r\n          onChange={(e) => setUserName(e.target.value)}\r\n          required\r\n        />\r\n      </Form.Group>\r\n\r\n      <Form.Group controlId=\"formBasicEmail\">\r\n        <Form.Label>Email:</Form.Label>\r\n        <Form.Control\r\n          type=\"email\"\r\n          placeholder=\"Enter email\"\r\n          value={email}\r\n          onChange={(e) => setEmail(e.target.value)}\r\n          required\r\n        />\r\n      </Form.Group>\r\n\r\n      <Form.Group controlId=\"formBasicPassword\">\r\n        <Form.Label>Password:</Form.Label>\r\n        <Form.Control\r\n          type=\"password\"\r\n          placeholder=\"Password\"\r\n          value={password}\r\n          onChange={(e) => setPassword(e.target.value)}\r\n          required\r\n        />\r\n        <Form.Label>Confirm Password:</Form.Label>\r\n        <Form.Control\r\n          type=\"password\"\r\n          placeholder=\"ConfirmPassword\"\r\n          value={password}\r\n          onChange={(e) => setPassword(e.target.value)}\r\n          required\r\n        />\r\n      </Form.Group>\r\n\r\n      <Button variant=\"primary\" type=\"submit\">\r\n        Register\r\n      </Button>\r\n      <Link to=\"/\">\r\n        <Button> Cancel </Button>\r\n      </Link>\r\n    </Form>\r\n  );\r\n};\r\n\r\nexport default Register;\r\n\r\n// /******************************New Code**************************************/\r\n// import { useRef, useState, useEffect } from \"react\";\r\n// import {\r\n//   faCheck,\r\n//   faTimes,\r\n//   faInfoCircle,\r\n// } from \"@fortawesome/free-solid-svg-icons\";\r\n// import { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\n// import axios from \"axios\";\r\n\r\n// const USER_REGEX = /^[A-z][A-z0-9-_]{3,23}$/;\r\n// const PWD_REGEX = /^(?=.*[a-z])(?=.*[A-Z])(?=.*[0-9])(?=.*[!@#$%]).{8,24}$/;\r\n// const REGISTER_URL = \"/register\";\r\n\r\n// const Register = () => {\r\n//   const userRef = useRef();\r\n//   const errRef = useRef();\r\n\r\n//   const [user, setUser] = useState(\"\");\r\n//   const [validName, setValidName] = useState(false);\r\n//   const [userFocus, setUserFocus] = useState(false);\r\n\r\n//   const [pwd, setPwd] = useState(\"\");\r\n//   const [validPwd, setValidPwd] = useState(false);\r\n//   const [pwdFocus, setPwdFocus] = useState(false);\r\n\r\n//   const [matchPwd, setMatchPwd] = useState(\"\");\r\n//   const [validMatch, setValidMatch] = useState(false);\r\n//   const [matchFocus, setMatchFocus] = useState(false);\r\n\r\n//   const [errMsg, setErrMsg] = useState(\"\");\r\n//   const [success, setSuccess] = useState(false);\r\n\r\n//   useEffect(() => {\r\n//     userRef.current.focus();\r\n//   }, []);\r\n\r\n//   useEffect(() => {\r\n//     setValidName(USER_REGEX.test(user));\r\n//   }, [user]);\r\n\r\n//   useEffect(() => {\r\n//     setValidPwd(PWD_REGEX.test(pwd));\r\n//     setValidMatch(pwd === matchPwd);\r\n//   }, [pwd, matchPwd]);\r\n\r\n//   useEffect(() => {\r\n//     setErrMsg(\"\");\r\n//   }, [user, pwd, matchPwd]);\r\n\r\n//   const handleSubmit = async (e) => {\r\n//     e.preventDefault();\r\n//     // if button enabled with JS hack\r\n//     const v1 = USER_REGEX.test(user);\r\n//     const v2 = PWD_REGEX.test(pwd);\r\n//     if (!v1 || !v2) {\r\n//       setErrMsg(\"Invalid Entry\");\r\n//       return;\r\n//     }\r\n//     try {\r\n//       const response = await axios.post(\r\n//         REGISTER_URL,\r\n//         JSON.stringify({ user, pwd }),\r\n//         {\r\n//           headers: { \"Content-Type\": \"application/json\" },\r\n//           withCredentials: true,\r\n//         }\r\n//       );\r\n//       console.log(response?.data);\r\n//       console.log(response?.accessToken);\r\n//       console.log(JSON.stringify(response));\r\n//       setSuccess(true);\r\n//       //clear state and controlled inputs\r\n//       //need value attrib on inputs for this\r\n//       setUser(\"\");\r\n//       setPwd(\"\");\r\n//       setMatchPwd(\"\");\r\n//     } catch (err) {\r\n//       if (!err?.response) {\r\n//         setErrMsg(\"No Server Response\");\r\n//       } else if (err.response?.status === 409) {\r\n//         setErrMsg(\"Username Taken\");\r\n//       } else {\r\n//         setErrMsg(\"Registration Failed\");\r\n//       }\r\n//       errRef.current.focus();\r\n//     }\r\n//   };\r\n\r\n//   return (\r\n//     <>\r\n//       {success ? (\r\n//         <section>\r\n//           <h1>Success!</h1>\r\n//           <p>\r\n//             <a href=\"#\">Sign In</a>\r\n//           </p>\r\n//         </section>\r\n//       ) : (\r\n//         <section>\r\n//           <p\r\n//             ref={errRef}\r\n//             className={errMsg ? \"errmsg\" : \"offscreen\"}\r\n//             aria-live=\"assertive\"\r\n//           >\r\n//             {errMsg}\r\n//           </p>\r\n//           <h1>Register</h1>\r\n//           <form onSubmit={handleSubmit}>\r\n//             <label htmlFor=\"username\">\r\n//               Username:\r\n//               <FontAwesomeIcon\r\n//                 icon={faCheck}\r\n//                 className={validName ? \"valid\" : \"hide\"}\r\n//               />\r\n//               <FontAwesomeIcon\r\n//                 icon={faTimes}\r\n//                 className={validName || !user ? \"hide\" : \"invalid\"}\r\n//               />\r\n//             </label>\r\n//             <input\r\n//               type=\"text\"\r\n//               id=\"username\"\r\n//               ref={userRef}\r\n//               autoComplete=\"off\"\r\n//               onChange={(e) => setUser(e.target.value)}\r\n//               value={user}\r\n//               required\r\n//               aria-invalid={validName ? \"false\" : \"true\"}\r\n//               aria-describedby=\"uidnote\"\r\n//               onFocus={() => setUserFocus(true)}\r\n//               onBlur={() => setUserFocus(false)}\r\n//             />\r\n//             <p\r\n//               id=\"uidnote\"\r\n//               className={\r\n//                 userFocus && user && !validName ? \"instructions\" : \"offscreen\"\r\n//               }\r\n//             >\r\n//               <FontAwesomeIcon icon={faInfoCircle} />\r\n//               4 to 24 characters.\r\n//               <br />\r\n//               Must begin with a letter.\r\n//               <br />\r\n//               Letters, numbers, underscores, hyphens allowed.\r\n//             </p>\r\n\r\n//             <label htmlFor=\"password\">\r\n//               Password:\r\n//               <FontAwesomeIcon\r\n//                 icon={faCheck}\r\n//                 className={validPwd ? \"valid\" : \"hide\"}\r\n//               />\r\n//               <FontAwesomeIcon\r\n//                 icon={faTimes}\r\n//                 className={validPwd || !pwd ? \"hide\" : \"invalid\"}\r\n//               />\r\n//             </label>\r\n//             <input\r\n//               type=\"password\"\r\n//               id=\"password\"\r\n//               onChange={(e) => setPwd(e.target.value)}\r\n//               value={pwd}\r\n//               required\r\n//               aria-invalid={validPwd ? \"false\" : \"true\"}\r\n//               aria-describedby=\"pwdnote\"\r\n//               onFocus={() => setPwdFocus(true)}\r\n//               onBlur={() => setPwdFocus(false)}\r\n//             />\r\n//             <p\r\n//               id=\"pwdnote\"\r\n//               className={pwdFocus && !validPwd ? \"instructions\" : \"offscreen\"}\r\n//             >\r\n//               <FontAwesomeIcon icon={faInfoCircle} />\r\n//               8 to 24 characters.\r\n//               <br />\r\n//               Must include uppercase and lowercase letters, a number and a\r\n//               special character.\r\n//               <br />\r\n//               Allowed special characters:{\" \"}\r\n//               <span aria-label=\"exclamation mark\">!</span>{\" \"}\r\n//               <span aria-label=\"at symbol\">@</span>{\" \"}\r\n//               <span aria-label=\"hashtag\">#</span>{\" \"}\r\n//               <span aria-label=\"dollar sign\">$</span>{\" \"}\r\n//               <span aria-label=\"percent\">%</span>\r\n//             </p>\r\n\r\n//             <label htmlFor=\"confirm_pwd\">\r\n//               Confirm Password:\r\n//               <FontAwesomeIcon\r\n//                 icon={faCheck}\r\n//                 className={validMatch && matchPwd ? \"valid\" : \"hide\"}\r\n//               />\r\n//               <FontAwesomeIcon\r\n//                 icon={faTimes}\r\n//                 className={validMatch || !matchPwd ? \"hide\" : \"invalid\"}\r\n//               />\r\n//             </label>\r\n//             <input\r\n//               type=\"password\"\r\n//               id=\"confirm_pwd\"\r\n//               onChange={(e) => setMatchPwd(e.target.value)}\r\n//               value={matchPwd}\r\n//               required\r\n//               aria-invalid={validMatch ? \"false\" : \"true\"}\r\n//               aria-describedby=\"confirmnote\"\r\n//               onFocus={() => setMatchFocus(true)}\r\n//               onBlur={() => setMatchFocus(false)}\r\n//             />\r\n//             <p\r\n//               id=\"confirmnote\"\r\n//               className={\r\n//                 matchFocus && !validMatch ? \"instructions\" : \"offscreen\"\r\n//               }\r\n//             >\r\n//               <FontAwesomeIcon icon={faInfoCircle} />\r\n//               Must match the first password input field.\r\n//             </p>\r\n\r\n//             <button\r\n//               disabled={!validName || !validPwd || !validMatch ? true : false}\r\n//             >\r\n//               Sign Up\r\n//             </button>\r\n//           </form>\r\n//           <p>\r\n//             Already registered?\r\n//             <br />\r\n//             <span className=\"line\">\r\n//               {/*put router link here*/}\r\n//               <a href=\"#\">Sign In</a>\r\n//             </span>\r\n//           </p>\r\n//         </section>\r\n//       )}\r\n//     </>\r\n//   );\r\n// };\r\n\r\n// export default Register;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}