{"ast":null,"code":"import * as React from 'react';\nimport PropTypes from 'prop-types';\nimport ClickAwayListener from '../ClickAwayListener';\nimport composeClasses from '../composeClasses';\nimport { getSnackbarUtilityClass } from './snackbarClasses';\nimport useSnackbar from '../useSnackbar';\nimport { useSlotProps } from '../utils';\nimport { useClassNamesOverride } from '../utils/ClassNameConfigurator';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst useUtilityClasses = () => {\n  const slots = {\n    root: ['root']\n  };\n  return composeClasses(slots, useClassNamesOverride(getSnackbarUtilityClass));\n};\n/**\n *\n * Demos:\n *\n * - [Snackbar](https://mui.com/base/react-snackbar/)\n * - [Snackbar](https://mui.com/material-ui/react-snackbar/)\n *\n * API:\n *\n * - [Snackbar API](https://mui.com/base/react-snackbar/components-api/#snackbar)\n */\nconst Snackbar = /*#__PURE__*/React.forwardRef(function Snackbar(props, forwardedRef) {\n  const {\n    autoHideDuration = null,\n    children,\n    disableWindowBlurListener = false,\n    exited = true,\n    onBlur,\n    onClose,\n    onFocus,\n    onMouseEnter,\n    onMouseLeave,\n    open,\n    resumeHideDuration,\n    slotProps = {},\n    slots = {},\n    ...other\n  } = props;\n  const classes = useUtilityClasses();\n  const {\n    getRootProps,\n    onClickAway\n  } = useSnackbar({\n    ...props,\n    autoHideDuration,\n    disableWindowBlurListener,\n    onClose,\n    open,\n    resumeHideDuration\n  });\n  const ownerState = props;\n  const Root = slots.root || 'div';\n  const rootProps = useSlotProps({\n    elementType: Root,\n    getSlotProps: getRootProps,\n    externalForwardedProps: other,\n    externalSlotProps: slotProps.root,\n    additionalProps: {\n      ref: forwardedRef\n    },\n    ownerState,\n    className: classes.root\n  });\n  const clickAwayListenerProps = useSlotProps({\n    elementType: ClickAwayListener,\n    externalSlotProps: slotProps.clickAwayListener,\n    additionalProps: {\n      onClickAway\n    },\n    ownerState\n  });\n\n  // ClickAwayListener doesn't support ownerState\n  delete clickAwayListenerProps.ownerState;\n\n  // So that we only render active snackbars.\n  if (!open && exited) {\n    return null;\n  }\n  return /*#__PURE__*/_jsx(ClickAwayListener, {\n    ...clickAwayListenerProps,\n    children: /*#__PURE__*/_jsx(Root, {\n      ...rootProps,\n      children: children\n    })\n  });\n});\nprocess.env.NODE_ENV !== \"production\" ? Snackbar.propTypes /* remove-proptypes */ = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit TypeScript types and run \"yarn proptypes\"  |\n  // ----------------------------------------------------------------------\n  /**\n   * The number of milliseconds to wait before automatically calling the\n   * `onClose` function. `onClose` should then set the state of the `open`\n   * prop to hide the Snackbar. This behavior is disabled by default with\n   * the `null` value.\n   * @default null\n   */\n  autoHideDuration: PropTypes.number,\n  /**\n   * @ignore\n   */\n  children: PropTypes.node,\n  /**\n   * If `true`, the `autoHideDuration` timer will expire even if the window is not focused.\n   * @default false\n   */\n  disableWindowBlurListener: PropTypes.bool,\n  /**\n   * The prop used to handle exited transition and unmount the component.\n   * @default true\n   */\n  exited: PropTypes.bool,\n  /**\n   * Callback fired when the component requests to be closed.\n   * Typically `onClose` is used to set state in the parent component,\n   * which is used to control the `Snackbar` `open` prop.\n   * The `reason` parameter can optionally be used to control the response to `onClose`,\n   * for example ignoring `clickaway`.\n   *\n   * @param {React.SyntheticEvent<any> | Event} event The event source of the callback.\n   * @param {string} reason Can be: `\"timeout\"` (`autoHideDuration` expired), `\"clickaway\"`, or `\"escapeKeyDown\"`.\n   */\n  onClose: PropTypes.func,\n  /**\n   * If `true`, the component is shown.\n   */\n  open: PropTypes.bool,\n  /**\n   * The number of milliseconds to wait before dismissing after user interaction.\n   * If `autoHideDuration` prop isn't specified, it does nothing.\n   * If `autoHideDuration` prop is specified but `resumeHideDuration` isn't,\n   * we default to `autoHideDuration / 2` ms.\n   */\n  resumeHideDuration: PropTypes.number,\n  /**\n   * The props used for each slot inside the Snackbar.\n   * @default {}\n   */\n  slotProps: PropTypes.shape({\n    clickAwayListener: PropTypes.oneOfType([PropTypes.func, PropTypes.shape({\n      children: PropTypes.element.isRequired,\n      disableReactTree: PropTypes.bool,\n      mouseEvent: PropTypes.oneOf(['onClick', 'onMouseDown', 'onMouseUp', 'onPointerDown', 'onPointerUp', false]),\n      onClickAway: PropTypes.func,\n      touchEvent: PropTypes.oneOf(['onTouchEnd', 'onTouchStart', false])\n    })]),\n    root: PropTypes.oneOfType([PropTypes.func, PropTypes.object])\n  }),\n  /**\n   * The components used for each slot inside the Snackbar.\n   * Either a string to use a HTML element or a component.\n   * @default {}\n   */\n  slots: PropTypes.shape({\n    root: PropTypes.elementType\n  })\n} : void 0;\nexport default Snackbar;","map":{"version":3,"names":["React","PropTypes","ClickAwayListener","composeClasses","getSnackbarUtilityClass","useSnackbar","useSlotProps","useClassNamesOverride","jsx","_jsx","useUtilityClasses","slots","root","Snackbar","forwardRef","props","forwardedRef","autoHideDuration","children","disableWindowBlurListener","exited","onBlur","onClose","onFocus","onMouseEnter","onMouseLeave","open","resumeHideDuration","slotProps","other","classes","getRootProps","onClickAway","ownerState","Root","rootProps","elementType","getSlotProps","externalForwardedProps","externalSlotProps","additionalProps","ref","className","clickAwayListenerProps","clickAwayListener","process","env","NODE_ENV","propTypes","number","node","bool","func","shape","oneOfType","element","isRequired","disableReactTree","mouseEvent","oneOf","touchEvent","object"],"sources":["/Users/bhartiprakash/Documents/GitHub/TaskManagementTool/taskmanagementtool-ui/node_modules/@mui/base/Snackbar/Snackbar.js"],"sourcesContent":["import * as React from 'react';\nimport PropTypes from 'prop-types';\nimport ClickAwayListener from '../ClickAwayListener';\nimport composeClasses from '../composeClasses';\nimport { getSnackbarUtilityClass } from './snackbarClasses';\nimport useSnackbar from '../useSnackbar';\nimport { useSlotProps } from '../utils';\nimport { useClassNamesOverride } from '../utils/ClassNameConfigurator';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst useUtilityClasses = () => {\n  const slots = {\n    root: ['root']\n  };\n  return composeClasses(slots, useClassNamesOverride(getSnackbarUtilityClass));\n};\n/**\n *\n * Demos:\n *\n * - [Snackbar](https://mui.com/base/react-snackbar/)\n * - [Snackbar](https://mui.com/material-ui/react-snackbar/)\n *\n * API:\n *\n * - [Snackbar API](https://mui.com/base/react-snackbar/components-api/#snackbar)\n */\nconst Snackbar = /*#__PURE__*/React.forwardRef(function Snackbar(props, forwardedRef) {\n  const {\n    autoHideDuration = null,\n    children,\n    disableWindowBlurListener = false,\n    exited = true,\n    onBlur,\n    onClose,\n    onFocus,\n    onMouseEnter,\n    onMouseLeave,\n    open,\n    resumeHideDuration,\n    slotProps = {},\n    slots = {},\n    ...other\n  } = props;\n  const classes = useUtilityClasses();\n  const {\n    getRootProps,\n    onClickAway\n  } = useSnackbar({\n    ...props,\n    autoHideDuration,\n    disableWindowBlurListener,\n    onClose,\n    open,\n    resumeHideDuration\n  });\n  const ownerState = props;\n  const Root = slots.root || 'div';\n  const rootProps = useSlotProps({\n    elementType: Root,\n    getSlotProps: getRootProps,\n    externalForwardedProps: other,\n    externalSlotProps: slotProps.root,\n    additionalProps: {\n      ref: forwardedRef\n    },\n    ownerState,\n    className: classes.root\n  });\n  const clickAwayListenerProps = useSlotProps({\n    elementType: ClickAwayListener,\n    externalSlotProps: slotProps.clickAwayListener,\n    additionalProps: {\n      onClickAway\n    },\n    ownerState\n  });\n\n  // ClickAwayListener doesn't support ownerState\n  delete clickAwayListenerProps.ownerState;\n\n  // So that we only render active snackbars.\n  if (!open && exited) {\n    return null;\n  }\n  return /*#__PURE__*/_jsx(ClickAwayListener, {\n    ...clickAwayListenerProps,\n    children: /*#__PURE__*/_jsx(Root, {\n      ...rootProps,\n      children: children\n    })\n  });\n});\nprocess.env.NODE_ENV !== \"production\" ? Snackbar.propTypes /* remove-proptypes */ = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit TypeScript types and run \"yarn proptypes\"  |\n  // ----------------------------------------------------------------------\n  /**\n   * The number of milliseconds to wait before automatically calling the\n   * `onClose` function. `onClose` should then set the state of the `open`\n   * prop to hide the Snackbar. This behavior is disabled by default with\n   * the `null` value.\n   * @default null\n   */\n  autoHideDuration: PropTypes.number,\n  /**\n   * @ignore\n   */\n  children: PropTypes.node,\n  /**\n   * If `true`, the `autoHideDuration` timer will expire even if the window is not focused.\n   * @default false\n   */\n  disableWindowBlurListener: PropTypes.bool,\n  /**\n   * The prop used to handle exited transition and unmount the component.\n   * @default true\n   */\n  exited: PropTypes.bool,\n  /**\n   * Callback fired when the component requests to be closed.\n   * Typically `onClose` is used to set state in the parent component,\n   * which is used to control the `Snackbar` `open` prop.\n   * The `reason` parameter can optionally be used to control the response to `onClose`,\n   * for example ignoring `clickaway`.\n   *\n   * @param {React.SyntheticEvent<any> | Event} event The event source of the callback.\n   * @param {string} reason Can be: `\"timeout\"` (`autoHideDuration` expired), `\"clickaway\"`, or `\"escapeKeyDown\"`.\n   */\n  onClose: PropTypes.func,\n  /**\n   * If `true`, the component is shown.\n   */\n  open: PropTypes.bool,\n  /**\n   * The number of milliseconds to wait before dismissing after user interaction.\n   * If `autoHideDuration` prop isn't specified, it does nothing.\n   * If `autoHideDuration` prop is specified but `resumeHideDuration` isn't,\n   * we default to `autoHideDuration / 2` ms.\n   */\n  resumeHideDuration: PropTypes.number,\n  /**\n   * The props used for each slot inside the Snackbar.\n   * @default {}\n   */\n  slotProps: PropTypes.shape({\n    clickAwayListener: PropTypes.oneOfType([PropTypes.func, PropTypes.shape({\n      children: PropTypes.element.isRequired,\n      disableReactTree: PropTypes.bool,\n      mouseEvent: PropTypes.oneOf(['onClick', 'onMouseDown', 'onMouseUp', 'onPointerDown', 'onPointerUp', false]),\n      onClickAway: PropTypes.func,\n      touchEvent: PropTypes.oneOf(['onTouchEnd', 'onTouchStart', false])\n    })]),\n    root: PropTypes.oneOfType([PropTypes.func, PropTypes.object])\n  }),\n  /**\n   * The components used for each slot inside the Snackbar.\n   * Either a string to use a HTML element or a component.\n   * @default {}\n   */\n  slots: PropTypes.shape({\n    root: PropTypes.elementType\n  })\n} : void 0;\nexport default Snackbar;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}