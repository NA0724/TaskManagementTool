{"ast":null,"code":"import { deepmerge } from '@mui/utils';\nimport cssVarsParser from './cssVarsParser';\nfunction prepareCssVars(theme, parserConfig) {\n  // @ts-ignore - ignore components do not exist\n  const {\n    colorSchemes = {},\n    components,\n    ...otherTheme\n  } = theme;\n  const {\n    vars: rootVars,\n    css: rootCss,\n    varsWithDefaults: rootVarsWithDefaults\n  } = cssVarsParser(otherTheme, parserConfig);\n  let themeVars = rootVarsWithDefaults;\n  const colorSchemesMap = {};\n  const {\n    light,\n    ...otherColorSchemes\n  } = colorSchemes;\n  Object.entries(otherColorSchemes || {}).forEach(_ref => {\n    let [key, scheme] = _ref;\n    const {\n      vars,\n      css,\n      varsWithDefaults\n    } = cssVarsParser(scheme, parserConfig);\n    themeVars = deepmerge(themeVars, varsWithDefaults);\n    colorSchemesMap[key] = {\n      css,\n      vars\n    };\n  });\n  if (light) {\n    // light color scheme vars should be merged last to set as default\n    const {\n      css,\n      vars,\n      varsWithDefaults\n    } = cssVarsParser(light, parserConfig);\n    themeVars = deepmerge(themeVars, varsWithDefaults);\n    colorSchemesMap.light = {\n      css,\n      vars\n    };\n  }\n  const generateCssVars = colorScheme => {\n    if (!colorScheme) {\n      return {\n        css: {\n          ...rootCss\n        },\n        vars: rootVars\n      };\n    }\n    return {\n      css: {\n        ...colorSchemesMap[colorScheme].css\n      },\n      vars: colorSchemesMap[colorScheme].vars\n    };\n  };\n  return {\n    vars: themeVars,\n    generateCssVars\n  };\n}\nexport default prepareCssVars;","map":{"version":3,"names":["deepmerge","cssVarsParser","prepareCssVars","theme","parserConfig","colorSchemes","components","otherTheme","vars","rootVars","css","rootCss","varsWithDefaults","rootVarsWithDefaults","themeVars","colorSchemesMap","light","otherColorSchemes","Object","entries","forEach","_ref","key","scheme","generateCssVars","colorScheme"],"sources":["/Users/bhartiprakash/Documents/GitHub/TaskManagementTool/taskmanagementtool-ui/node_modules/@mui/system/esm/cssVars/prepareCssVars.js"],"sourcesContent":["import { deepmerge } from '@mui/utils';\nimport cssVarsParser from './cssVarsParser';\nfunction prepareCssVars(theme, parserConfig) {\n  // @ts-ignore - ignore components do not exist\n  const {\n    colorSchemes = {},\n    components,\n    ...otherTheme\n  } = theme;\n  const {\n    vars: rootVars,\n    css: rootCss,\n    varsWithDefaults: rootVarsWithDefaults\n  } = cssVarsParser(otherTheme, parserConfig);\n  let themeVars = rootVarsWithDefaults;\n  const colorSchemesMap = {};\n  const {\n    light,\n    ...otherColorSchemes\n  } = colorSchemes;\n  Object.entries(otherColorSchemes || {}).forEach(([key, scheme]) => {\n    const {\n      vars,\n      css,\n      varsWithDefaults\n    } = cssVarsParser(scheme, parserConfig);\n    themeVars = deepmerge(themeVars, varsWithDefaults);\n    colorSchemesMap[key] = {\n      css,\n      vars\n    };\n  });\n  if (light) {\n    // light color scheme vars should be merged last to set as default\n    const {\n      css,\n      vars,\n      varsWithDefaults\n    } = cssVarsParser(light, parserConfig);\n    themeVars = deepmerge(themeVars, varsWithDefaults);\n    colorSchemesMap.light = {\n      css,\n      vars\n    };\n  }\n  const generateCssVars = colorScheme => {\n    if (!colorScheme) {\n      return {\n        css: {\n          ...rootCss\n        },\n        vars: rootVars\n      };\n    }\n    return {\n      css: {\n        ...colorSchemesMap[colorScheme].css\n      },\n      vars: colorSchemesMap[colorScheme].vars\n    };\n  };\n  return {\n    vars: themeVars,\n    generateCssVars\n  };\n}\nexport default prepareCssVars;"],"mappings":"AAAA,SAASA,SAAS,QAAQ,YAAY;AACtC,OAAOC,aAAa,MAAM,iBAAiB;AAC3C,SAASC,cAAcA,CAACC,KAAK,EAAEC,YAAY,EAAE;EAC3C;EACA,MAAM;IACJC,YAAY,GAAG,CAAC,CAAC;IACjBC,UAAU;IACV,GAAGC;EACL,CAAC,GAAGJ,KAAK;EACT,MAAM;IACJK,IAAI,EAAEC,QAAQ;IACdC,GAAG,EAAEC,OAAO;IACZC,gBAAgB,EAAEC;EACpB,CAAC,GAAGZ,aAAa,CAACM,UAAU,EAAEH,YAAY,CAAC;EAC3C,IAAIU,SAAS,GAAGD,oBAAoB;EACpC,MAAME,eAAe,GAAG,CAAC,CAAC;EAC1B,MAAM;IACJC,KAAK;IACL,GAAGC;EACL,CAAC,GAAGZ,YAAY;EAChBa,MAAM,CAACC,OAAO,CAACF,iBAAiB,IAAI,CAAC,CAAC,CAAC,CAACG,OAAO,CAACC,IAAA,IAAmB;IAAA,IAAlB,CAACC,GAAG,EAAEC,MAAM,CAAC,GAAAF,IAAA;IAC5D,MAAM;MACJb,IAAI;MACJE,GAAG;MACHE;IACF,CAAC,GAAGX,aAAa,CAACsB,MAAM,EAAEnB,YAAY,CAAC;IACvCU,SAAS,GAAGd,SAAS,CAACc,SAAS,EAAEF,gBAAgB,CAAC;IAClDG,eAAe,CAACO,GAAG,CAAC,GAAG;MACrBZ,GAAG;MACHF;IACF,CAAC;EACH,CAAC,CAAC;EACF,IAAIQ,KAAK,EAAE;IACT;IACA,MAAM;MACJN,GAAG;MACHF,IAAI;MACJI;IACF,CAAC,GAAGX,aAAa,CAACe,KAAK,EAAEZ,YAAY,CAAC;IACtCU,SAAS,GAAGd,SAAS,CAACc,SAAS,EAAEF,gBAAgB,CAAC;IAClDG,eAAe,CAACC,KAAK,GAAG;MACtBN,GAAG;MACHF;IACF,CAAC;EACH;EACA,MAAMgB,eAAe,GAAGC,WAAW,IAAI;IACrC,IAAI,CAACA,WAAW,EAAE;MAChB,OAAO;QACLf,GAAG,EAAE;UACH,GAAGC;QACL,CAAC;QACDH,IAAI,EAAEC;MACR,CAAC;IACH;IACA,OAAO;MACLC,GAAG,EAAE;QACH,GAAGK,eAAe,CAACU,WAAW,CAAC,CAACf;MAClC,CAAC;MACDF,IAAI,EAAEO,eAAe,CAACU,WAAW,CAAC,CAACjB;IACrC,CAAC;EACH,CAAC;EACD,OAAO;IACLA,IAAI,EAAEM,SAAS;IACfU;EACF,CAAC;AACH;AACA,eAAetB,cAAc"},"metadata":{},"sourceType":"module","externalDependencies":[]}